/* eslint-disable object-curly-newline */
'use strict';

// MODULES //

var tape = require( 'tape' );
var deepHasOwn = require( './../lib/index.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof deepHasOwn, 'function', 'export is a function' );
	t.end();
});

tape( 'the function exports a factory function', function test( t ) {
	t.strictEqual( typeof deepHasOwn.factory, 'function', 'exports a factory function' );
	t.end();
});

tape( 'the function returns `false` if provided `null` or `non-object` for the first argument', function test( t ) {
	var values;
	var i;

	values = [
		null,
		void 0,
		NaN,
		3,
		'3',
		true,
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( deepHasOwn( values[ i ], 'a.b.c' ), false, 'returns false when provided ' + ( typeof value ) + ' as a frist argument' );
	}
	t.end();
});

tape( 'the function throws an error if provided a key path argument which is neither a string primitive or a key array', function test( t ) {
	var values;
	var i;

	values = [
		null,
		void 0,
		NaN,
		3,
		{},
		true,
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws error when provided ' + ( typeof value ) + ' as a path' );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var obj = {
				'a': {
					'b': 'c'
				}
			};
			deepHasOwn( obj, value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		null,
		void 0,
		NaN,
		3,
		'3',
		[],
		true,
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws error when provided ' + ( typeof values[ i ] ) + ' as an option' );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var obj = {
				'a': {
					'b': 'c'
				}
			};
			deepHasOwn( obj, 'a.b', value );
		};
	}
});

tape( 'the function throws an error if provided a `sep` option argument which is not a string primitive', function test( t ) {
	var values;
	var i;

	values = [
		null,
		void 0,
		NaN,
		3,
		{},
		true,
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws error when provided ' + ( typeof values[ i ] ) + ' as a sep option' );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var obj = {
				'a': {
					'b': 'c'
				}
			};
			deepHasOwn( obj, 'a.b', {
				'sep': value
			});
		};
	}
});

tape( 'the function returns `true` if an object has a specified path (defined as a delimited string)', function test( t ) {
	var bool;

	bool = deepHasOwn( { 'a': { 'b': { 'c': 'd' } } }, 'a.b.c' );
	t.strictEqual( bool, true, 'returns true' );

	bool = deepHasOwn( { 'a': [ { 'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, 'a.0.b.0.c' );
	t.strictEqual( bool, true, 'returns true' );

	t.end();
});

tape( 'the function returns `true` if an object has a specified path (defined as a key array)', function test( t ) {
	var bool;

	bool = deepHasOwn( { 'a': { 'b': { 'c': 'd' } } }, [ 'a', 'b', 'c' ] );
	t.strictEqual( bool, true, 'returns true' );

	bool = deepHasOwn( { 'a': [ { 'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, [ 'a', '0', 'b', '0', 'c' ] );
	t.strictEqual( bool, true, 'returns true' );

	t.end();
});

tape( 'the function returns `true` if an object has a specified path (using non-default delimiter)', function test( t ) {
	var bool;

	bool = deepHasOwn( { 'a': { 'b': { 'c': 'd' } } }, 'a/b/c', {
		'sep': '/'
	});
	t.strictEqual( bool, true, 'returns true' );

	bool = deepHasOwn( { 'a': [ { 'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, 'a/0/b/0/c', {
		'sep': '/'
	});
	t.strictEqual( bool, true, 'returns true' );

	t.end();
});

tape( 'the function returns `false` if an object does not have a specified path (defined as a delimited string)', function test( t ) {
	var bool;

	bool = deepHasOwn( { 'a': { 'b': { 'c': 'd' } } }, 'a.b.c.d.e' );
	t.strictEqual( bool, false, 'returns false' );

	bool = deepHasOwn( { 'a': [ { 'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, '0.a.0.b.0.e' );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if an object does not have a specified path (defined as a key array)', function test( t ) {
	var bool;

	bool = deepHasOwn( { 'a': { 'b': { 'c': 'd' } } }, [ 'a', 'b', 'c', 'd', 'e' ] );
	t.strictEqual( bool, false, 'returns false' );

	bool = deepHasOwn( { 'a': [ { 'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, [ '0', 'a', '0', 'b', '0', 'e' ] );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if an object does not have a specified path (using non-default delimiter)', function test( t ) {
	var bool;

	bool = deepHasOwn( { 'a': { 'b': { 'c': 'd' } } }, 'a/b/c/d/e', {
		'sep': '/'
	});
	t.strictEqual( bool, false, 'returns false' );

	bool = deepHasOwn( { 'a': [ { 'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, '0/a/0/b/0/e', {
		'sep': '/'
	});
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});
