'use strict';

// MODULES //

var tape = require( 'tape' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( test ) {
	test.ok( true, __filename );
	test.strictEqual( typeof validate, 'function', 'export is a function' );
	test.end();
});

tape( 'the function returns an error if provided an options argument which is not an object', function test( test ) {
	var err;

	err = validate( {}, null );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided null as an option' );

	err = validate( {}, void 0 );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided undefined as an option' );

	err = validate( {}, NaN );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided NaN as an option' );

	err = validate( {}, 3 );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided number as an option' );

	err = validate( {}, [] );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided array as an option' );

	test.end();
});

tape( 'the function returns an error if provided a `sep` option argument which is not a string primitive', function test( test ) {
	var err;

	err = validate( {}, { 'sep' : null } );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided null as a sep option' );

	err = validate( {}, { 'sep' : void 0 } );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided undefined as a sep option' );

	err = validate( {}, { 'sep' : NaN } );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided NaN as a sep option' );

	err = validate( {}, { 'sep' : 3 } );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided number as a sep option' );

	err = validate( {}, { 'sep' : {} } );
	test.strictEqual( err instanceof TypeError, true, 'returns a TypeError when provided object as a sep option' );

	test.end();
});

tape( 'the function returns `null` if all options are of valid type (incorrect options properties)', function test( test ) {
	var options;
	var obj;
	var returnsNull;

	options = {
		'foo': true,
		'bar': 'baz'
	};
	obj = {};
	returnsNull = validate( obj, options );

	test.strictEqual( returnsNull, null, 'returns null' );
	test.deepEqual( obj, {}, 'does not set any properties' );

	test.end();
});

tape( 'the function returns `null` if all options are of valid type (sep options property)', function test( test ) {
	var options;
	var obj;
	var returnsNull;
	
	options = {
		'sep': '_'
	};
	obj = {};
	returnsNull = validate( obj, options );
	 
	test.strictEqual( returnsNull, null, 'returns null' );
	test.strictEqual( obj.sep, '_', 'sets sep option as `_`' );

	options = {
		'sep': '/'
	};
	obj = {};
	returnsNull = validate( obj, options );
	 
	test.strictEqual( returnsNull, null, 'returns null' );
	test.strictEqual( obj.sep, '/', 'sets sep option as `/`' );
	
	test.end();
});

