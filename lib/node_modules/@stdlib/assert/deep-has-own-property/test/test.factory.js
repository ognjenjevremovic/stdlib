'use strict';

// MODULES //

var tape = require( 'tape' );
var factory = require( './../lib/factory.js' );


// TESTS //

tape( 'main export is a function', function test( test ) {
	test.ok( true, __filename );
	test.strictEqual( typeof factory, 'function', 'export is a function' );
	test.end();
});

tape( 'the function throws an error if provided a key path argument which is neither a string primitive or a key array', function test( test ) {
	var throwsErr;

	throwsErr = incorrectPathValue( null );
	test.throws( throwsErr, TypeError, 'throws error when provided null as a path' );

	throwsErr = incorrectPathValue( void 0 );
	test.throws( throwsErr, TypeError, 'throws error when provided undefined as a path' );

	throwsErr = incorrectPathValue( NaN );
	test.throws( throwsErr, TypeError, 'throws error when provided NaN as a path' );

	throwsErr = incorrectPathValue( 3 );
	test.throws( throwsErr, TypeError, 'throws error when provided number as a path' );

	throwsErr = incorrectPathValue( {} );
	test.throws( throwsErr, TypeError, 'throws error when provided object as a path' );

	test.end();

	function incorrectPathValue( path ) {
		return function incorrectPathValue() {
			factory( obj, path );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( test ) {
	var throwsErr;

	throwsErr = incorrectOptionsValue( null );
	test.throws( throwsErr, TypeError, 'throws error when provided null as an option' );

	throwsErr = incorrectOptionsValue( void 0 );
	test.throws( throwsErr, TypeError, 'throws error when provided undefined as an option' );

	throwsErr = incorrectOptionsValue( NaN );
	test.throws( throwsErr, TypeError, 'throws error when provided NaN as an option' );

	throwsErr = incorrectOptionsValue( 3 );
	test.throws( throwsErr, TypeError, 'throws error when provided number as an option' );

	throwsErr = incorrectOptionsValue( [] );
	test.throws( throwsErr, TypeError, 'throws error when provided array as an option' );

	test.end();

	function incorrectOptionsValue( options ) {
		return function incorrectOptionsValue() {
			factory( 'a.b', options );
		};
	}
});

tape( 'the function throws an error if provided a `sep` option argument which is not a string primitive', function test( test ) {
	var throwsErr;

	throwsErr = incorrectSepOptionValue( null );
	test.throws( throwsErr, TypeError, 'throws error when provided null as a sep option' );

	throwsErr = incorrectSepOptionValue( void 0 );
	test.throws( throwsErr, TypeError, 'throws error when provided undefined as a sep option' );

	throwsErr = incorrectSepOptionValue( NaN );
	test.throws( throwsErr, TypeError, 'throws error when provided NaN as a sep option' );

	throwsErr = incorrectSepOptionValue( 3 );
	test.throws( throwsErr, TypeError, 'throws error when provided number as a sep option' );

	throwsErr = incorrectSepOptionValue( {} );
	test.throws( throwsErr, TypeError, 'throws error when provided object as a sep option' );

	test.end();

	function incorrectSepOptionValue( sepValue ) {
		return function incorrectSepOptionValue() {
			factory( 'a.b', {
				'sep': sepValue
			});
		};
	}
});

tape( 'the function returns a function if provided with a valid option argument', function test( test ) {
	var dHasOwn = factory( 'a/b/c', {
		'sep': '/'
	});

	test.equal( typeof dHasOwn, 'function', 'returns a function' );

	test.end();
});

tape( 'the function returns `false` if provided a `null` or `non-object`', function test( test ) {
	var dHasOwn;
	var returnsFalse;

	dHasOwn = factory( 'a_b_c', {
		'sep' : '_'
	});

	returnsFalse = dHasOwn( null );
	test.strictEqual( returnsFalse, false, 'returns false when provided null' );

	returnsFalse = dHasOwn( void 0 );
	test.strictEqual( returnsFalse, false, 'returns false when provided undefined' );

	returnsFalse = dHasOwn( NaN );
	test.strictEqual( returnsFalse, false, 'returns false when provided NaN' );

	returnsFalse = dHasOwn( 3 );
	test.strictEqual( returnsFalse, false, 'returns false when provided number' );

	returnsFalse = dHasOwn( true );
	test.strictEqual( returnsFalse, false, 'returns false when provided boolean' );

	test.end();
});

tape( 'the created function returns `true` if an object has a specified path (defined as a delimited string)', function test( test ) {
	var bool;
	var dHasOwn;

	dHasOwn = factory('a.b.0.c');
	bool = dHasOwn( { 'a': { 'b': [ { 'c': 'd'} ] } } );
	test.strictEqual( bool, true, 'returns true' );

	test.end();
});

tape( 'the function returns `true` if an object has a specified path (defined as a key array)', function test( test ) {
	var bool;
	var dHasOwn;

	dHasOwn = factory([ 'a', 'b', '0', 'c' ]);
	bool = dHasOwn( { 'a': { 'b': [ { 'c': 'd'} ] } } );
	test.strictEqual( bool, true, 'returns true' );

	test.end();
});

tape( 'the function returns `true` if an object has a specified path (using non-default delimiter)', function test( test ) {
	var bool;
	var dHasOwn;

	dHasOwn = factory('a/b/0/c', {
		sep: '/'
	});
	bool = dHasOwn( { 'a': { 'b': [ { 'c': 'd'} ] } } );
	test.strictEqual( bool, true, 'returns true' );

	test.end();
});

tape( 'the function returns `false` if an object does not have a specified path (defined as a delimited string)', function test( test ) {
	var bool;
	var dHasOwn;

	dHasOwn = factory('a.b.c.0.d');
	bool = dHasOwn( { 'a': { 'b': [ { 'c': 'd'} ] } } );
	test.strictEqual( bool, false, 'returns false' );

	test.end();
});

tape( 'the function returns `false` if an object does not have a specified path (defined as a key array)', function test( test ) {
	var bool;
	var dHasOwn;

	dHasOwn = factory([ 'a', 'b', 'c', '0', 'd' ]);
	bool = dHasOwn( { 'a': { 'b': [ { 'c': 'd'} ] } } );
	test.strictEqual( bool, false, 'returns false' );

	test.end();
});

tape( 'the function returns `false` if an object does not have a specified path (using non-default delimiter)', function test( test ) {
	var bool;
	var dHasOwn;

	dHasOwn = factory('a/b/c/0/d', {
		sep: '/'
	});
	bool = dHasOwn( { 'a': { 'b': [ { 'c': 'd'} ] } } );
	test.strictEqual( bool, false, 'returns false' );

	test.end();
});