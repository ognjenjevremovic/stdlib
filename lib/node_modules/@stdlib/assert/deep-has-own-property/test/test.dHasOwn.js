'use strict';

// MODULES //

var tape = require( 'tape' );
var dHasOwn = require( './../lib/dHasOwn.js' );


// TESTS //

tape( 'main export is a function', function test( test ) {
	test.ok( true, __filename );
	test.strictEqual( typeof dHasOwn, 'function', 'export is a function' );
	test.end();
});

tape( 'the function returns `true` if an object has a specified path (defined as a delimited string)', function test( test ) {
	var bool;

	bool = dHasOwn( { 'a': { 'b': { 'c': 'd'} } }, 'a.b.c' );
	test.strictEqual( bool, true, 'returns true' );

	bool = dHasOwn( { 'a': [ {'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, '0.a.0.b.0.c' );
	test.strictEqual( bool, true, 'returns true' );

	test.end();
});

tape( 'the function returns `true` if an object has a specified path (defined as a key array)', function test( test ) {
	var bool;

	bool = dHasOwn( { 'a': { 'b': { 'c': 'd'} } }, [ 'a', 'b', 'c' ] );
	test.strictEqual( bool, true, 'returns true' );

	bool = dHasOwn( { 'a': [ {'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, [ '0', 'a', '0', 'b', '0', 'c' ] );
	test.strictEqual( bool, true, 'returns true' );

	test.end();
});

tape( 'the function returns `false` if an object does not have a specified path (defined as a delimited string)', function test( test ) {
	var bool;

	bool = dHasOwn( { 'a': { 'b': { 'c': 'd' } } }, 'a.b.c.d.e' );
	test.strictEqual( bool, false, 'returns false' );

	bool = dHasOwn( { 'a': [ {'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, '0.a.0.b.0.e' );
	test.strictEqual( bool, false, 'returns false' );

	test.end();
});

tape( 'the function returns `false` if an object does not have a specified path (defined as a key array)', function test( test ) {
	var bool;

	bool = dHasOwn( { 'a': { 'b': { 'c': 'd' } } }, [ 'a', 'b', 'c', 'd', 'e' ] );
	test.strictEqual( bool, false, 'returns false' );

	bool = dHasOwn( { 'a': [ {'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }, [ '0', 'a', '0', 'b', '0', 'e' ] );
	test.strictEqual( bool, false, 'returns false' );

	test.end();
});
