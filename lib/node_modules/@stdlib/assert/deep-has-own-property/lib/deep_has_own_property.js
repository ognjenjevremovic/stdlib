'use strict';

// MODULES //

var isObjectLike = require( '@stdlib/assert/is-object-like' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isArray = require( '@stdlib/assert/is-array' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );
var dHasOwn = require( './d_has_own.js' );


// MAIN //

/**
* Check whether an object contains a nested key path.
*
* @param {ObjectLike} objLikeVal - input object
* @param {(string|Array)} path - key path
* @param {Options} [options] - function options
* @param {string} [options.sep='.'] - key path separator
* @throws {TypeError} second argument must be a string primitive or key array
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {*} nested property value
*
* @example
* var obj = { 'a': { 'b': { 'c': 'd' } } };
* var bool = deepHasOwn( obj, 'a.b.c' );
* // returns true
*
* @example
* var arr = [
*     { 'a': [ {'b': [ { 'c': 'd' }, { 'e': 'f' } ] } ] }
* ];
* var bool = deepHasOwn( arr, '0.a.0.b.0.c' );
* // returns true
*
* @example
* var obj = { 'a': { 'b': { 'c': 'd' } } };
* var bool = deepHasOwn( obj, ['a','b','c' ] );
* // returns true
*
* @example
* var obj = { 'a': { 'b': { 'c': 'd' } } };
* var bool = deepHasOwn( obj, 'a/b/c', {
*     'sep': '/'
* });
* // returns true
*/
function deepHasOwn( objLikeVal, path, options ) {
	var isStringValue;
	var properties;
	var optsCopy;
	var err;
	if ( !isObjectLike( objLikeVal ) ) {
		return false;
	}
	isStringValue = isString( path );
	if ( !isStringValue && !isArray( path ) ) {
		throw new TypeError( 'invalid input argument. Key path must be a string primitive or a key array. Value: `' + path + '`.' );
	}
	optsCopy = copy( defaults );
	if ( arguments.length > 2 ) {
		err = validate( optsCopy, options );
		if ( err ) {
			throw err;
		}
	}
	if ( isStringValue ) {
		properties = path.split( optsCopy.sep );
	} else {
		properties = path;
	}
	return dHasOwn( objLikeVal, properties );
} // end FUNCTION deepHasOwn()


// EXPORTS //

module.exports = deepHasOwn;
