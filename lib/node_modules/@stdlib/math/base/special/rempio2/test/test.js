'use strict';

// MODULES //

var tape = require( 'tape' );
var isInteger = require( '@stdlib/assert/is-integer' );
var isNumber = require( '@stdlib/assert/is-number' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var incrspace = require( '@stdlib/math/utils/incrspace' );
var linspace = require( '@stdlib/math/utils/linspace' );
var randu = require( '@stdlib/math/base/random/randu' );
var abs = require( '@stdlib/math/base/special/abs' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var rempio2 = require( './../lib' );


// VARIABLES //

var PI02 = PI / 2.0;
var PI04 = PI / 4.0;


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof rempio2, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `0` and sets the elements of `y` to `NaN` if provided `NaN`', function test( t ) {
	var y = new Array( 2 );
	var n = rempio2( NaN, y );
	t.strictEqual( n, 0.0, 'returns 0' );
	t.strictEqual( isnan( y[0] ), true, 'sets y[0] to NaN' );
	t.strictEqual( isnan( y[1] ), true, 'sets y[1] to NaN' );
	t.end();
});

tape( 'the function returns `0` and sets the elements of `y` to `NaN` if provided positive or negative infinity', function test( t ) {
	var y = new Array( 2 );
	var n = rempio2( PINF, y );
	t.strictEqual( n, 0.0, 'returns 0' );
	t.strictEqual( isnan( y[0] ), true, 'sets y[0] to NaN' );
	t.strictEqual( isnan( y[1] ), true, 'sets y[1] to NaN' );

	y = new Array( 2 );
	n = rempio2( NINF, y );
	t.strictEqual( n, 0.0, 'returns 0' );
	t.strictEqual( isnan( y[0] ), true, 'sets y[0] to NaN' );
	t.strictEqual( isnan( y[1] ), true, 'sets y[1] to NaN' );
	t.end();
});

tape( 'the function returns `n` and stores `r` as two double-precision floating points numbers in `y` such that `x - n*pi/2 = r` (positive)', function test( t ) {
	var delta;
	var tol;
	var x;
	var y;
	var z;
	var n;
	var i;

	for ( i = 0; i < 200; i++ ) {
		x = randu()*100.0;
		y = new Array( 2 );
		n = rempio2( x, y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		z = ( PI02*n ) + ( y[0]+y[1] );
		delta = abs( z - x );
		tol = EPS * abs( x );
		t.strictEqual( delta <= tol, true, 'can recover input value' );
	}
	t.end();
});

tape( 'the function returns `n` and stores `r` as two double-precision floating points numbers in `y` such that `x - n*pi/2 = r` (tiny positive)', function test( t ) {
	var delta;
	var tol;
	var x;
	var y;
	var z;
	var n;
	var i;

	for ( i = 0; i < 200; i++ ) {
		x = randu()*1.0e-100;
		y = new Array( 2 );
		n = rempio2( x, y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		z = ( PI02*n ) + ( y[0]+y[1] );
		delta = abs( z - x );
		tol = EPS * abs( x );
		t.strictEqual( delta <= tol, true, 'can recover input value' );
	}
	t.end();
});

tape( 'the function returns `n` and stores `r` as two double-precision floating points numbers in `y` such that `x - n*pi/2 = r` (negative)', function test( t ) {
	var delta;
	var tol;
	var x;
	var y;
	var z;
	var n;
	var i;

	for ( i = 0; i < 200; i++ ) {
		x = randu()*(-100.0);
		y = new Array( 2 );
		n = rempio2( x, y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		z = ( PI02*n ) + ( y[0]+y[1] );
		delta = abs( z - x );
		tol = EPS * abs( x );
		t.strictEqual( delta <= tol, true, 'can recover input value' );
	}
	t.end();
});

tape( 'the function returns `n` and stores `r` as two double-precision floating points numbers in `y` such that `x - n*pi/2 = r` (tiny negative)', function test( t ) {
	var delta;
	var tol;
	var x;
	var y;
	var z;
	var n;
	var i;

	for ( i = 0; i < 200; i++ ) {
		x = randu()*(-1.0e-100);
		y = new Array( 2 );
		n = rempio2( x, y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		z = ( PI02*n ) + ( y[0]+y[1] );
		delta = abs( z - x );
		tol = EPS * abs( x );
		t.strictEqual( delta <= tol, true, 'can recover input value' );
	}
	t.end();
});

tape( 'the function returns `n` and stores `r` as two double-precision floating points numbers in `y` such that `x - n*pi/2 = r` (multiples of pi/4)', function test( t ) {
	var delta;
	var tol;
	var x;
	var y;
	var z;
	var n;
	var i;

	x = incrspace( -10.0*PI04, 10.0*PI04, PI04 );
	for ( i = 0; i < x.length; i++ ) {
		y = new Array( 2 );
		n = rempio2( x[i], y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		z = ( PI02*n ) + ( y[0]+y[1] );
		delta = abs( z - x[i] );
		tol = EPS * abs( x[i] );
		t.strictEqual( delta <= tol, true, 'can recover input value' );
	}
	t.end();
});

tape( 'for large positive input values, the function returns the last three binary digits of `n` and stores `r` as two double-precision floating points numbers in `y`', function test( t ) {
	var x;
	var y;
	var n;
	var i;

	x = linspace( pow( 2.0, 20 ) * PI02, pow( 2.0, 60 ) * PI02, 4000 );
	for ( i = 0; i < x.length; i++ ) {
		y = new Array( 2 );
		n = rempio2( x[i], y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		t.strictEqual( n < 8, true, 'returns a value smaller than 8' );
	}
	t.end();
});

tape( 'for large negative input values, the function returns the last three binary digits of `n` and stores `r` as two double-precision floating points numbers in `y`', function test( t ) {
	var x;
	var y;
	var n;
	var i;

	x = linspace( -pow( 2.0, 20 ) * PI02, -pow( 2.0, 60 ) * PI02, 4000 );
	for ( i = 0; i < x.length; i++ ) {
		y = new Array( 2 );
		n = rempio2( x[i], y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		t.strictEqual( n < 8, true, 'returns a value smaller than 8' );
	}
	t.end();
});

tape( 'for huge positive input values, the function returns the last three binary digits of `n` and stores `r` as two double-precision floating points numbers in `y`', function test( t ) {
	var x;
	var y;
	var n;
	var i;

	x = linspace( pow( 2.0, 60 ) * PI02, pow( 2.0, 1020 ) * PI02, 6000 );
	for ( i = 0; i < x.length; i++ ) {
		y = new Array( 2 );
		n = rempio2( x[i], y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		t.strictEqual( n < 8, true, 'returns a value smaller than 8' );
	}
	t.end();
});

tape( 'for huge negative input values, the function returns the last three binary digits of `n` and stores `r` as two double-precision floating points numbers in `y`', function test( t ) {
	var x;
	var y;
	var n;
	var i;

	x = linspace( -pow( 2.0, 60 ) * PI02, -pow( 2.0, 1020 ) * PI02, 6000 );
	for ( i = 0; i < x.length; i++ ) {
		y = new Array( 2 );
		n = rempio2( x[i], y );
		t.strictEqual( isInteger( n ), true, 'returns integer' );
		t.strictEqual( isNumber( y[0] ), true, 'assigns a number value to y[0]' );
		t.strictEqual( isNumber( y[1] ), true, 'assigns a number value to y[1]' );
		t.strictEqual( n < 8, true, 'returns a value smaller than 8' );
	}
	t.end();
});
